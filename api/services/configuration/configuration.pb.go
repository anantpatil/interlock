// Code generated by protoc-gen-go.
// source: github.com/ehazlett/interlock/api/services/configuration/configuration.proto
// DO NOT EDIT!

/*
Package configuration is a generated protocol buffer package.

It is generated from these files:
	github.com/ehazlett/interlock/api/services/configuration/configuration.proto

It has these top-level messages:
	Config
	Backend
	ContextRoot
	ConfigRequest
	ConfigResponse
*/
package configuration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import interlock_v1_types "github.com/ehazlett/interlock/api/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	Version  string     `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Backends []*Backend `protobuf:"bytes,2,rep,name=backends" json:"backends,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Config) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Config) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

type Backend struct {
	Name               string                  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Hosts              []string                `protobuf:"bytes,2,rep,name=hosts" json:"hosts,omitempty"`
	ContextRoots       map[string]*ContextRoot `protobuf:"bytes,3,rep,name=context_roots,json=contextRoots" json:"context_roots,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Port               uint32                  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	Ssl                bool                    `protobuf:"varint,5,opt,name=ssl" json:"ssl,omitempty"`
	SslPort            uint32                  `protobuf:"varint,6,opt,name=ssl_port,json=sslPort" json:"ssl_port,omitempty"`
	SslCert            string                  `protobuf:"bytes,7,opt,name=ssl_cert,json=sslCert" json:"ssl_cert,omitempty"`
	SslCertKey         string                  `protobuf:"bytes,8,opt,name=ssl_cert_key,json=sslCertKey" json:"ssl_cert_key,omitempty"`
	SslOnly            bool                    `protobuf:"varint,9,opt,name=ssl_only,json=sslOnly" json:"ssl_only,omitempty"`
	SslBackend         bool                    `protobuf:"varint,10,opt,name=ssl_backend,json=sslBackend" json:"ssl_backend,omitempty"`
	WebsocketEndpoints []string                `protobuf:"bytes,11,rep,name=websocket_endpoints,json=websocketEndpoints" json:"websocket_endpoints,omitempty"`
	IpHash             bool                    `protobuf:"varint,12,opt,name=ip_hash,json=ipHash" json:"ip_hash,omitempty"`
	Targets            []string                `protobuf:"bytes,13,rep,name=targets" json:"targets,omitempty"`
}

func (m *Backend) Reset()                    { *m = Backend{} }
func (m *Backend) String() string            { return proto.CompactTextString(m) }
func (*Backend) ProtoMessage()               {}
func (*Backend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Backend) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Backend) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *Backend) GetContextRoots() map[string]*ContextRoot {
	if m != nil {
		return m.ContextRoots
	}
	return nil
}

func (m *Backend) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Backend) GetSsl() bool {
	if m != nil {
		return m.Ssl
	}
	return false
}

func (m *Backend) GetSslPort() uint32 {
	if m != nil {
		return m.SslPort
	}
	return 0
}

func (m *Backend) GetSslCert() string {
	if m != nil {
		return m.SslCert
	}
	return ""
}

func (m *Backend) GetSslCertKey() string {
	if m != nil {
		return m.SslCertKey
	}
	return ""
}

func (m *Backend) GetSslOnly() bool {
	if m != nil {
		return m.SslOnly
	}
	return false
}

func (m *Backend) GetSslBackend() bool {
	if m != nil {
		return m.SslBackend
	}
	return false
}

func (m *Backend) GetWebsocketEndpoints() []string {
	if m != nil {
		return m.WebsocketEndpoints
	}
	return nil
}

func (m *Backend) GetIpHash() bool {
	if m != nil {
		return m.IpHash
	}
	return false
}

func (m *Backend) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

type ContextRoot struct {
	Name    string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path    string   `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Rewrite bool     `protobuf:"varint,3,opt,name=rewrite" json:"rewrite,omitempty"`
	Targets []string `protobuf:"bytes,4,rep,name=targets" json:"targets,omitempty"`
}

func (m *ContextRoot) Reset()                    { *m = ContextRoot{} }
func (m *ContextRoot) String() string            { return proto.CompactTextString(m) }
func (*ContextRoot) ProtoMessage()               {}
func (*ContextRoot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ContextRoot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContextRoot) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ContextRoot) GetRewrite() bool {
	if m != nil {
		return m.Rewrite
	}
	return false
}

func (m *ContextRoot) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

type ConfigRequest struct {
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ConfigResponse struct {
	Config       *Config                          `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	PluginConfig *interlock_v1_types.PluginConfig `protobuf:"bytes,2,opt,name=plugin_config,json=pluginConfig" json:"plugin_config,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConfigResponse) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ConfigResponse) GetPluginConfig() *interlock_v1_types.PluginConfig {
	if m != nil {
		return m.PluginConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "interlock.v1.configuration.Config")
	proto.RegisterType((*Backend)(nil), "interlock.v1.configuration.Backend")
	proto.RegisterType((*ContextRoot)(nil), "interlock.v1.configuration.ContextRoot")
	proto.RegisterType((*ConfigRequest)(nil), "interlock.v1.configuration.ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "interlock.v1.configuration.ConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Configuration service

type ConfigurationClient interface {
	Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type configurationClient struct {
	cc *grpc.ClientConn
}

func NewConfigurationClient(cc *grpc.ClientConn) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := grpc.Invoke(ctx, "/interlock.v1.configuration.Configuration/Config", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Configuration service

type ConfigurationServer interface {
	Config(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

func RegisterConfigurationServer(s *grpc.Server, srv ConfigurationServer) {
	s.RegisterService(&_Configuration_serviceDesc, srv)
}

func _Configuration_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interlock.v1.configuration.Configuration/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).Config(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Configuration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interlock.v1.configuration.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Config",
			Handler:    _Configuration_Config_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ehazlett/interlock/api/services/configuration/configuration.proto",
}

func init() {
	proto.RegisterFile("github.com/ehazlett/interlock/api/services/configuration/configuration.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x25, 0xdb, 0x6f, 0xa7, 0xe5, 0xc3, 0x20, 0x61, 0x7a, 0x21, 0x0a, 0x07, 0x0a, 0x87, 0x44,
	0x14, 0x21, 0xa1, 0x45, 0x08, 0x89, 0xaa, 0x12, 0x12, 0x48, 0xac, 0x72, 0xe4, 0x12, 0xa5, 0xd9,
	0xa1, 0xb1, 0x9a, 0xb5, 0x83, 0xc7, 0xed, 0x12, 0xfe, 0x06, 0x07, 0xfe, 0x2e, 0xb2, 0x9d, 0x54,
	0xad, 0xf8, 0xd8, 0xde, 0x66, 0xfc, 0xe6, 0xcd, 0xbc, 0x79, 0x8e, 0x43, 0x3e, 0xad, 0xb9, 0x2e,
	0xb6, 0xab, 0x28, 0x97, 0x57, 0x31, 0x14, 0xd9, 0x8f, 0x12, 0xb4, 0x8e, 0xb9, 0xd0, 0xa0, 0x4a,
	0x99, 0x6f, 0xe2, 0xac, 0xe2, 0x31, 0x82, 0xda, 0xf1, 0x1c, 0x30, 0xce, 0xa5, 0xf8, 0xca, 0xd7,
	0x5b, 0x95, 0x69, 0x2e, 0xc5, 0x71, 0x16, 0x55, 0x4a, 0x6a, 0x49, 0xa7, 0x7b, 0x66, 0xb4, 0x7b,
	0x11, 0x1d, 0x55, 0x4c, 0xdf, 0xdc, 0x3c, 0x49, 0xd7, 0x15, 0x60, 0x5c, 0x95, 0xdb, 0x35, 0x17,
	0xa9, 0x63, 0xbb, 0xc6, 0x61, 0x4e, 0xfa, 0x0b, 0x9b, 0x53, 0x46, 0x06, 0x3b, 0x50, 0xc8, 0xa5,
	0x60, 0x5e, 0xe0, 0xcd, 0x46, 0x49, 0x9b, 0xd2, 0x77, 0x64, 0xb8, 0xca, 0xf2, 0x0d, 0x88, 0x4b,
	0x64, 0x67, 0x41, 0x67, 0xe6, 0xcf, 0x9f, 0x44, 0xff, 0xd6, 0x13, 0xbd, 0x77, 0xb5, 0xc9, 0x9e,
	0x14, 0xfe, 0xea, 0x92, 0x41, 0x73, 0x4a, 0x29, 0xe9, 0x8a, 0xec, 0x0a, 0x9a, 0x19, 0x36, 0xa6,
	0x0f, 0x48, 0xaf, 0x90, 0xa8, 0x5d, 0xf7, 0x51, 0xe2, 0x12, 0xfa, 0x85, 0x4c, 0x72, 0x29, 0x34,
	0x7c, 0xd7, 0xa9, 0x92, 0x52, 0x23, 0xeb, 0xd8, 0xd9, 0xaf, 0x4e, 0x98, 0x1d, 0x2d, 0x1c, 0x31,
	0x31, 0xbc, 0xa5, 0xd0, 0xaa, 0x4e, 0xc6, 0xf9, 0xc1, 0x91, 0x51, 0x51, 0x49, 0xa5, 0x59, 0x37,
	0xf0, 0x66, 0x93, 0xc4, 0xc6, 0xf4, 0x2e, 0xe9, 0x20, 0x96, 0xac, 0x17, 0x78, 0xb3, 0x61, 0x62,
	0x42, 0xfa, 0x88, 0x0c, 0x11, 0xcb, 0xd4, 0x56, 0xf6, 0x6d, 0xe5, 0x00, 0xb1, 0xbc, 0x30, 0xc5,
	0x0d, 0x94, 0x83, 0xd2, 0x6c, 0xe0, 0xec, 0x42, 0x2c, 0x17, 0xa0, 0x34, 0x0d, 0xc8, 0xb8, 0x85,
	0xd2, 0x0d, 0xd4, 0x6c, 0x68, 0x61, 0xd2, 0xc0, 0x1f, 0xa1, 0x6e, 0xc9, 0x52, 0x94, 0x35, 0x1b,
	0xd9, 0x71, 0x86, 0xfc, 0x59, 0x94, 0x35, 0x7d, 0x4c, 0x7c, 0x03, 0x35, 0xd6, 0x31, 0x62, 0x51,
	0xc3, 0x6d, 0xfd, 0x8b, 0xc9, 0xfd, 0x6b, 0x58, 0xa1, 0xcc, 0x37, 0xa0, 0x53, 0x10, 0x97, 0x95,
	0xe4, 0x42, 0x23, 0xf3, 0xad, 0x73, 0x74, 0x0f, 0x2d, 0x5b, 0x84, 0x3e, 0x24, 0x03, 0x5e, 0xa5,
	0x45, 0x86, 0x05, 0x1b, 0xdb, 0x6e, 0x7d, 0x5e, 0x7d, 0xc8, 0xb0, 0x30, 0x17, 0xae, 0x33, 0xb5,
	0x06, 0x8d, 0x6c, 0x62, 0xd9, 0x6d, 0x3a, 0x2d, 0xc8, 0xbd, 0x3f, 0x0c, 0x34, 0xf6, 0x98, 0x6d,
	0xdc, 0xbd, 0x99, 0x90, 0xbe, 0x25, 0xbd, 0x5d, 0x56, 0x6e, 0x81, 0x9d, 0x05, 0xde, 0xcc, 0x9f,
	0x3f, 0xfd, 0xdf, 0xc5, 0x1c, 0xf4, 0x4b, 0x1c, 0xeb, 0xfc, 0xec, 0xb5, 0x17, 0x72, 0xe2, 0x1f,
	0x20, 0x7f, 0xfd, 0x38, 0xcc, 0x55, 0x65, 0xba, 0xb0, 0x43, 0x46, 0x89, 0x8d, 0x8d, 0x74, 0x05,
	0xd7, 0x8a, 0x6b, 0x60, 0x1d, 0xe7, 0x5f, 0x93, 0x1e, 0x2e, 0xd5, 0x3d, 0x5a, 0x2a, 0xbc, 0x43,
	0x26, 0xee, 0x4b, 0x4f, 0xe0, 0xdb, 0x16, 0x50, 0x87, 0x3f, 0x3d, 0x72, 0xbb, 0x3d, 0xc1, 0x4a,
	0x0a, 0x04, 0x7a, 0x4e, 0xfa, 0x4e, 0xb6, 0x55, 0xe0, 0xcf, 0xc3, 0x1b, 0x56, 0x32, 0xdc, 0x86,
	0x41, 0x97, 0x64, 0x72, 0xf4, 0xc0, 0x1a, 0x57, 0x82, 0xe3, 0x16, 0xf6, 0x25, 0x46, 0x17, 0xb6,
	0xb0, 0x69, 0x30, 0xae, 0x0e, 0xb2, 0xb9, 0x6a, 0x65, 0x36, 0x63, 0x68, 0xb6, 0x7f, 0xa1, 0xcf,
	0x4e, 0x50, 0xe3, 0x76, 0x9b, 0x3e, 0x3f, 0xa5, 0xd4, 0x2d, 0x1d, 0xde, 0x5a, 0xf5, 0xed, 0xbf,
	0xe0, 0xe5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xcd, 0xac, 0x2f, 0xb4, 0x04, 0x00, 0x00,
}
